import time
import datetime
import re
from django.utils import timezone
from django.conf import settings as SETTINGS
import hashlib
import time
from urlparse import urljoin
from urllib import urlencode
from django.core.urlresolvers import reverse


def get_salt(sinput):
    """
    Create a salt from a source
    Mainly used in generating a unique link to reset a password
    """
    source = sinput + SETTINGS.SECRET_KEY
    salt = hashlib.md5(source.encode('utf-8')).hexdigest()
    return salt


def verify_salt(sinput, salt):
    """
    Verify that the salt generated by the input is the same as the given salt
    """
    if salt == get_salt(sinput):
        return True
    return False

def has_nested_attr(_object, *keys):

    if len(keys) == 0:
        return True
    else:
        if hasattr(_object, keys[0]):
            has_nested_attr(_object[keys.pop(0)], keys)
        else:
            return False


def dt_to_age(dt):
    today = datetime.date.today()
    return today.year - dt.year - ((today.month, today.day) < (dt.month, dt.day))


def elapsed_time_percentage(start_time, end_time, value=None):
    """
    Function will give a percentage back from datetime and value (now by default)
    """
    def _t(dt):
        return time.mktime(dt.timetuple())

    value = value or timezone.now()
    total = _t(end_time) - _t(start_time)
    current = _t(end_time) - _t(value)

    return (100.0 * current) / total


def youtube_url_validation(url):
    youtube_regex = (
        r'(https?://)?(www\.)?'
        '(youtube|youtu|youtube-nocookie)\.(com|be)/'
        '(watch\?v=|embed/|v/|.+\?v=)?([^&=%\?]{11})')

    youtube_regex_match = re.match(youtube_regex, url)
    if youtube_regex_match:
        return youtube_regex_match.group(6)

    return youtube_regex_match